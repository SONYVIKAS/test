import java.util.Map;

public class Main {
    // A fox needs to climb n number of steps. It can jump up 1 step, 2 steps, or 3 steps at a time. 
    // How many possible ways are there to get to the top of n steps?
    public static int climbStairs(int n) {
        if (n == 0 || n == 1) {
            return 1;
        }

        if (n == 2) {
            return 2;
        }

        return climbStairs(n - 1) + climbStairs(n - 2) + climbStairs(n - 3);
    }

    // A fox needs to climb n number of steps. It can jump up 1 step, 2 steps, or 3 steps at a time. 
    // How many possible ways are there to get to the top of n steps? 
    // Solve with dynamic programming using the memoization method.
    public static int climbStairsDp(int n) {
        Map<Integer, Integer> cache = new HashMap<>();
        cache.put(0, 1);
        cache.put(1, 1);
        cache.put(2, 2);

        if (cache.containsKey(n)) {
            return cache.get(n);
        }

        cache.put(n, climbStairs(n - 1) + climbStairs(n - 2) + climbStairs(n - 3));
        return cache.get(n);
    }

    // A fox needs to climb n number of steps. It can jump up X steps (array of possibilities) at a time. 
    // How many possible ways are there to get to the top of n steps? 
    // Solve with dynamic programming using the tabulation method.
    public static int climbStairsTab(int n, int[] steps) {
        int[] result = new int[n + 1];
        result[0] = 1;

        for (int i = 0; i < steps.length; i++) {
            for (int j = steps[i]; j <= n; j++) {
                int sum = 0;
                for (int k = 0; k <= i; k++) {
                    sum += result[j - steps[k]];
                }
                result[j] = sum;
            }
        }

        return result[n];
    }

    public static void main(String[] args) {
        System.out.println(climbStairs(6)); // Output: 24
        System.out.println(climbStairs(8)); // Output: 81

        System.out.println(climbStairsDp(6)); // Output: 24
        System.out.println(climbStairsDp(8)); // Output: 81

        System.out.println(climbStairsTab(6, new int[]{1, 2, 3})); // Output: 24
        System.out.println(climbStairsTab(10, new int[]{2, 3, 5})); // Output: 14
    }