
public class StackWithMin {
    // Java Stack to hold the items
    private Stack<Integer> items;
    // Java Stack to hold the minimum values
    private Stack<Integer> minStack;

    public StackWithMin() {
        items = new Stack<>();
        minStack = new Stack<>();
    }

    public void push(int item) {
        // Add item to end of stack
        items.push(item);

        // If minStack is empty or the last item in minStack is greater than the new item
        // add the new item to minStack
        if (minStack.isEmpty() || minStack.peek() > item) {
            minStack.push(item);
        } else {
            // Else add the last item in minStack to minStack
            minStack.push(minStack.peek());
        }
    }

    public int pop() {
        // Remove item from end of stack and return it
        if (items.isEmpty()) {
            throw new IndexOutOfBoundsException("pop from empty list");
        }

        minStack.pop();

        return items.pop();
    }

    public int length() {
        // Return length of stack
        return items.size();
    }

    public void empty() {
        // Empty stack
        items = new Stack<>();
        minStack = new Stack<>();
    }

    public boolean isEmpty() {
        // Check if stack is empty
        return items.isEmpty();
    }

    public int findMin() {
        // Returns the minimum value of a numerical stack
        if (!isEmpty()) {
            return minStack.peek();
        } else {
            throw new IndexOutOfBoundsException("findMin from empty list");
        }
    }