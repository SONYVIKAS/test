import java.util.Set;

public class Main {

    // Method to find change from combinations of `num_coins` of dimes and pennies.
    public static Set<Integer> coins(int num_coins) {
        Set<Integer> combos = new HashSet<>();
        int[] coins = {1, 10};
        coinsHelper(num_coins, combos, 0, coins);
        return combos;
    }

    // Helper method to recursively calculate all possible combinations.
    private static void coinsHelper(int coins_left, Set<Integer> combos, int total, int[] coins) {
        if (coins_left == 0) {
            combos.add(total);
            return;
        }

        for (int coin : coins) {
            coinsHelper(coins_left - 1, combos, total + coin, coins);
        }
    }

    // Method to find change from combinations of `num_coins` of dimes and pennies.
    public static Set<Integer> coins_2(int num_coins) {
        Set<Integer> combos = new HashSet<>();
        int dimes = 10;
        int pennies = 1;
        coins_2Helper(num_coins, combos, 0, dimes, pennies);
        return combos;
    }

    // Helper method to recursively calculate all possible combinations.
    private static void coins_2Helper(int coins_left, Set<Integer> combos, int total, int dimes, int pennies) {
        if (coins_left == 0) {
            combos.add(total);
            return;
        }

        coins_2Helper(coins_left - 1, combos, total + dimes, dimes, pennies);
        coins_2Helper(coins_left - 1, combos, total + pennies, dimes, pennies);
    }

    public static void main(String[] args) {
        // Test cases can be run here.
    }