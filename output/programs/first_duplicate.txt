
public class Main {
    public static void main(String[] args) {
        System.out.println(firstDuplicate(new int[]{8, 4, 6, 2, 6, 4, 7, 9, 5, 8})); // 6
        System.out.println(firstDuplicate(new int[]{2, 3, 3, 1, 5, 2})); // 3
        System.out.println(firstDuplicate(new int[]{1})); // -1
        System.out.println(firstDuplicate(new int[]{2, 1})); // -1
        System.out.println(firstDuplicate(new int[]{2, 2})); // 2
        System.out.println(firstDuplicate(new int[]{2, 4, 3, 5, 1})); // -1
    }

    // Function to find the first duplicate in the array
    public static int firstDuplicate(int[] a) {
        // Time: O(n^2)
        // Space: O(n)

        int lowestIndex = a.length;
        for (int i = 0; i < a.length; i++) {
            int num = a[i];
            for (int j = i + 1; j < a.length; j++) {
                if (a[j] == num) {
                    if (j < lowestIndex) {
                        lowestIndex = j;
                    }
                    break;
                }
            }
        }

        if (lowestIndex < a.length) {
            return a[lowestIndex];
        }

        return -1;
    }

    // Optimized function to find the first duplicate in the array
    public static int firstDuplicateOptimized(int[] arr) {
        // Time: O(n)
        // Space: O(1)

        for (int i = 0; i < arr.length; i++) {
            int value = arr[Math.abs(arr[i]) - 1];

            if (value >= 0) {
                arr[Math.abs(arr[i]) - 1] = -value;
            } else {
                return Math.abs(arr[i]);
            }
        }

        return -1;
    }