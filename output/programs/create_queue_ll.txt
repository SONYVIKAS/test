class Node {
    Object data;
    Node next;

    // Node constructor
    public Node(Object data) {
        this.data = data;
        this.next = null;
    }
}

// Queue class
class Queue {
    Node head;
    Node tail;

    // Queue constructor
    public Queue() {
        this.head = null;
        this.tail = null;
    }

    // Method to get length of queue
    public int length() {
        Node curr = this.head;
        int length = 0;

        while (curr != null) {
            length++;
            curr = curr.next;
        }

        return length;
    }

    // Method to add item to end of queue
    public void enqueue(Object item) {
        Node new_node = new Node(item);

        if (this.head == null && this.tail == null) {
            this.head = new_node;
            this.tail = new_node;
        } else {
            this.tail.next = new_node;
            this.tail = new_node;
        }
    }

    // Method to remove item from start of queue
    public Object dequeue() {
        if (this.head == null) {
            return null;
        } else {
            Object dequeued = this.head.data;
            this.head = this.head.next;
            return dequeued;
        }
    }

    // Method to check if queue is empty
    public boolean isEmpty() {
        return this.head == null;
    }

    // Method to get the first item in the queue without removing it
    public Object peek() {
        return this.head.data;
    }

    // Method to print items in queue
    public void printQueue() {
        Node curr = this.head;

        if (curr == null) {
            System.out.println("[]");
            return;
        }

        System.out.print("[");
        while (curr != null) {
            System.out.print(curr.data);
            if (curr.next != null) {
                System.out.print(", ");
            }
            curr = curr.next;
        }
        System.out.println("]");
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        Queue q = new Queue();
        q.enqueue("buy flight");
        q.enqueue("pack");
        q.enqueue("enjoy vacation");
        q.printQueue();
        System.out.println(q.dequeue());
        q.printQueue();
    }