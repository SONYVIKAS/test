import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

public class RunTest {

    // Configuration
    private static final String LOGIN_ID = "naveennoni2429@gmail.com";
    private static final String PASSWORD = "Github@0310";
    private static final String USER = "naveenjupeta";
    private static final String REPO_NAME = "codegenup";
    private static final String FOLDER_1 = "output";
    private static final String FOLDER_2 = "programs";
    private static final List<String> FILE_NAME = List.of("add_to_zero.java");

    private static WebDriver driver;
    private static WebDriverWait wait;

    public static void main(String[] args) {
        // Setup WebDriver
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver, Duration.ofSeconds(1));

        // Screenshot directory
        File screensDir = new File("screenshots");
        screensDir.mkdirs();

        try {
            // Step 1: Login
            driver.get("https://github.com/login");
            snap("login_page");
            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("login_field"))).sendKeys(LOGIN_ID);
            driver.findElement(By.id("password")).sendKeys(PASSWORD);
            snap("before_submit");
            driver.findElement(By.name("commit")).click();

            // Step 1a: 2FA if prompted
            try {
                WebElement otp = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("otp")));
                System.out.print("Enter 2FA code: ");
                String code = System.console().readLine();
                otp.sendKeys(code);
                driver.findElement(By.xpath("//button[contains(text(), 'Verify')]")).click();
                snap("2fa_done");
            } catch (Exception e) {
                // No 2FA prompt
            }

            wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("img.avatar-user")));
            System.out.println("Logged in");

            // Step 2: Open repository
            String repoUrl = "https://github.com/" + USER + "/" + REPO_NAME;
            driver.get(repoUrl);
            snap("repo_home");
            Thread.sleep(2000);

            // Step 3: Navigate to src
            if (!clickItem(FOLDER_1, true)) {
                driver.get(repoUrl + "/tree/main/" + FOLDER_1);
                snap(FOLDER_1);
                Thread.sleep(2000);
            }

            // Step 4: Navigate nested path segments
            String currentUrl = driver.getCurrentUrl();
            for (String part : FOLDER_2.split("/")) {
                if (!clickItem(part, true)) {
                    driver.get(currentUrl + "/" + part);
                    snap(FOLDER_2);
                    Thread.sleep(2000);
                }
                currentUrl = driver.getCurrentUrl();
            }

            // Step 5: Download target files
            for (String fname : FILE_NAME) {
                if (!clickItem(fname, false)) {
                    driver.get(currentUrl + "/" + fname);
                    Thread.sleep(2000);
                }
                snap("view_" + fname);
                WebElement rawBtn = wait.until(ExpectedConditions.elementToBeClickable(By.id("raw-url")));
                driver.get(rawBtn.getAttribute("href"));
                String content = wait.until(ExpectedConditions.presenceOfElementLocated(By.tagName("pre"))).getText();
                File downloadedFilesDir = new File("downloaded_files");
                downloadedFilesDir.mkdirs();
                File localFile = new File(downloadedFilesDir, fname);
                try (FileWriter writer = new FileWriter(localFile)) {
                    writer.write(content);
                }
                snap("saved_" + fname);
                System.out.println("Saved " + fname);
                driver.get(currentUrl);
                snap(FILE_NAME.toString());
                Thread.sleep(1000);
            }

        } catch (Exception e) {
            System.out.println("Error occurred: " + e.getMessage());
            snap("error");
            try (FileWriter writer = new FileWriter("error_page_source.html")) {
                writer.write(driver.getPageSource());
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
            System.out.println("Page source saved to error_page_source.html");
        } finally {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            driver.quit();
        }
    }

    private static void snap(String name) {
        File screenshot = new File("screenshots", name + ".png");
        // Save screenshot logic here
        System.out.println("ðŸ“¸ " + screenshot.getPath());
    }

    private static boolean clickItem(String name, boolean isFolder) {
        try {
            By locator = By.xpath("//a[contains(@class,'js-navigation-open') and normalize-space(text())='" + name + "']");
            WebElement el = wait.until(ExpectedConditions.elementToBeClickable(locator));
            driver.executeScript("arguments[0].scrollIntoView(true);", el);
            el.click();
            String target = isFolder ? "/tree/" : "/blob/";
            wait.until(d -> d.getCurrentUrl().contains(target) && d.getCurrentUrl().contains(name));
            snap("opened_" + name);
            System.out.println("Opened " + name);
            return true;
        } catch (Exception e) {
            return false;
        }
    }